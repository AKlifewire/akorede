name: Frontend Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  FLUTTER_VERSION: '3.10.0'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Amplify App ID
        id: get-amplify-app
        run: |
          APP_ENV=${{ github.event.inputs.environment || 'dev' }}
          APP_ID=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/amplify/appId" --query "Parameter.Value" --output text)
          echo "AMPLIFY_APP_ID=${APP_ID}" >> $GITHUB_ENV
          echo "amplify_app_id=${APP_ID}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Analyze code
        working-directory: ./frontend
        run: flutter analyze

      - name: Run tests
        working-directory: ./frontend
        run: flutter test

      - name: Build web
        working-directory: ./frontend
        run: |
          flutter config --enable-web
          flutter build web --release

      - name: Create Amplify config
        working-directory: ./frontend/build/web/assets
        run: |
          APP_ENV=${{ github.event.inputs.environment || 'dev' }}
          
          # Get configuration values from SSM Parameter Store
          USER_POOL_ID=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/auth/userPoolId" --query "Parameter.Value" --output text)
          USER_POOL_CLIENT_ID=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/auth/userPoolClientId" --query "Parameter.Value" --output text)
          IDENTITY_POOL_ID=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/auth/identityPoolId" --query "Parameter.Value" --output text)
          APPSYNC_API_URL=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/appsync/apiUrl" --query "Parameter.Value" --output text)
          UI_BUCKET=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/ui/bucket" --query "Parameter.Value" --output text)
          IOT_ENDPOINT=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/iot/endpoint" --query "Parameter.Value" --output text)
          
          # Create amplify-config.json
          cat > amplify-config.json << EOL
          {
            "aws_project_region": "${AWS_REGION}",
            "aws_cognito_region": "${AWS_REGION}",
            "aws_user_pools_id": "${USER_POOL_ID}",
            "aws_user_pools_web_client_id": "${USER_POOL_CLIENT_ID}",
            "aws_cognito_identity_pool_id": "${IDENTITY_POOL_ID}",
            "aws_appsync_graphqlEndpoint": "${APPSYNC_API_URL}",
            "aws_appsync_region": "${AWS_REGION}",
            "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS",
            "aws_iot_endpoint": "${IOT_ENDPOINT}",
            "aws_user_files_s3_bucket": "${UI_BUCKET}",
            "aws_user_files_s3_bucket_region": "${AWS_REGION}"
          }
          EOL

      - name: Deploy to Amplify
        run: |
          APP_ENV=${{ github.event.inputs.environment || 'dev' }}
          BRANCH="main"
          
          # Start the job
          JOB_ID=$(aws amplify start-job \
            --app-id $AMPLIFY_APP_ID \
            --branch-name $BRANCH \
            --job-type RELEASE \
            --query 'jobSummary.jobId' \
            --output text)
          
          echo "Started Amplify deployment job: $JOB_ID"
          
          # Wait for the job to complete
          aws amplify wait job-complete \
            --app-id $AMPLIFY_APP_ID \
            --branch-name $BRANCH \
            --job-id $JOB_ID

      - name: Get deployment URL
        id: get-url
        run: |
          APP_ENV=${{ github.event.inputs.environment || 'dev' }}
          URL=$(aws ssm get-parameter --name "/AKSmartHome/${APP_ENV}/amplify/appUrl" --query "Parameter.Value" --output text)
          echo "App URL: $URL"
          echo "app_url=${URL}" >> $GITHUB_OUTPUT

      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ Frontend deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Frontend Deployment Successful*\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Environment:* ${{ github.event.inputs.environment || 'dev' }}\n*URL:* ${{ steps.get-url.outputs.app_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "❌ Frontend deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Frontend Deployment Failed*\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Environment:* ${{ github.event.inputs.environment || 'dev' }}\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK